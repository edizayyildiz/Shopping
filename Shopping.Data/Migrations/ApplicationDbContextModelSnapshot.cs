// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.Data;

namespace Shopping.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressDescription");

                    b.Property<string>("CityId");

                    b.Property<string>("Company")
                        .HasMaxLength(200);

                    b.Property<string>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(100);

                    b.Property<int>("InvoiceType");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            AddressDescription = "Yeşilpınar Mah. Üsküp Sok. No:20  Daire:15",
                            CityId = "ce87fa38-6bb9-4f9d-9c7c-b2ca767106ba",
                            Company = "",
                            CountryId = "820b84fc-a4e0-4f56-a34f-e752287d7e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictId = "5c8d78df-6a68-4d2a-abe9-bc5638d91fa3",
                            Email = "edmrc58@gmail.com",
                            FirstName = "Emir",
                            IdentityNumber = "23456789567",
                            InvoiceType = 0,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Demirci",
                            MiddleName = "Sezer",
                            Phone = "053456789046",
                            PostalCode = "34122",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            AddressDescription = "Yeşilpınar Mah. Çoşkun Sok. No:20  Daire:15",
                            CityId = "ce87fa38-6bb9-4f9d-9c7c-b2ca767106ba",
                            Company = "",
                            CountryId = "820b84fc-a4e0-4f56-a34f-e752287d7e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictId = "5c8d78df-6a68-4d2a-abe9-bc5638d91fa3",
                            Email = "karmaillegal57@gmail.com",
                            FirstName = "Emir",
                            IdentityNumber = "23333389567",
                            InvoiceType = 0,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Demirci",
                            MiddleName = "Sezer",
                            Phone = "053356383046",
                            PostalCode = "34132",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "19f1a6cc-8e89-4efa-9ea1-8255f3a4616b",
                            AddressDescription = "Mimar Sinan Mah. Zenciler Sok. No:10 Daire:9",
                            CityId = "ce87fa38-6bb9-4f9d-9c7c-b2ca767106ba",
                            Company = "İstanbul Ağaç ve Peyzaj A.Ş",
                            CountryId = "820b84fc-a4e0-4f56-a34f-e752287d7e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictId = "5c8d78df-6a68-4d2a-abe9-bc5638d91fa3",
                            Email = "ydmrc57@gmail.com",
                            FirstName = "Yasin",
                            IdentityNumber = "23891540669",
                            InvoiceType = 0,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Demirci",
                            MiddleName = "",
                            Phone = "05301567890",
                            PostalCode = "34533",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Advertisement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ButtonText");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Html");

                    b.Property<string>("Image");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.Property<string>("Style");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Id = "06edb6a0-30d0-498c-a380-45561360b347",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "notebook",
                            Image = "macBookAir.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "0",
                            Style = "",
                            SubTitle = "%30 İndirimlerle",
                            Title = "Yeni Notebooklar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f2fb95c1-2c3d-4c80-914d-56fa25aabd03",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "Yeni telefonlar",
                            Image = "yenitelefon.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "1",
                            Style = "",
                            SubTitle = "2018 Model",
                            Title = "Yeni Cep Telefonlar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2ac117b2-466b-4cd5-abf8-1843e40ef53e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "Yeni saatler",
                            Image = "yenisaatler.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "2",
                            Style = "",
                            SubTitle = "2018 Model",
                            Title = "Yeni Saatler",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "43f5f97e-c1ed-46b4-8f2b-76461b96244f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "Yeni Gözlük",
                            Image = "yenigunesgozluk.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "3",
                            Style = "",
                            SubTitle = "2018 Model",
                            Title = "Yeni Güneş Gözlükleri",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "ab7eb932-7930-401a-9414-a598fc0b71f2",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "Yeni Ayakkabılar",
                            Image = "yeniayakkabi.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "4",
                            Style = "",
                            SubTitle = "2018 Model",
                            Title = "Yeni Model Ayakkabılar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1e2c415-1b92-4325-b826-25ffad381878",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Html = "Yeni Takılar",
                            Image = "yenitakilar.jpg",
                            IsActive = false,
                            IsDeleted = false,
                            Location = "5",
                            Style = "",
                            SubTitle = "2018 Model",
                            Title = "Yeni Model Takılar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AccessToken");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Fullname");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Pic");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Image");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("ShowInHome");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = "e8840d39-abf2-4577-bfa5-a92144107b09",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(3951),
                            CreatedBy = "username",
                            Image = "apple1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Apple",
                            ShowInHome = false,
                            Slug = "apple",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(3963),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "f3bf46ec-4135-4f13-b874-b6d0fea16ada",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4476),
                            CreatedBy = "username",
                            Image = "dell.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dell",
                            ShowInHome = false,
                            Slug = "dell",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4480),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d85aacb-8f1b-4488-b5bd-5390b9cd76c6",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4495),
                            CreatedBy = "username",
                            Image = "hp1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Hp",
                            ShowInHome = false,
                            Slug = "hp",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4495),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "c047e1e6-01d1-47d9-8087-ad1b3400ad0e",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4501),
                            CreatedBy = "username",
                            Image = "lenovo1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Lenovo",
                            ShowInHome = false,
                            Slug = "lenovo",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4501),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "45ee14ef-d408-47e3-b104-01a9e23c5def",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4626),
                            CreatedBy = "username",
                            Image = "samsung1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Samsung",
                            ShowInHome = false,
                            Slug = "samsung",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4626),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "109057a8-d4c0-40c5-bede-a238dcdf0245",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4638),
                            CreatedBy = "username",
                            Image = "asus.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asus",
                            ShowInHome = false,
                            Slug = "asus",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4641),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "d228e627-feb9-4208-9a10-b3ac8dc866fa",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4644),
                            CreatedBy = "username",
                            Image = "sony.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sony",
                            ShowInHome = false,
                            Slug = "sony",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4644),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "ff23d5c6-d2b6-4687-a715-299ee0c5dd25",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4651),
                            CreatedBy = "username",
                            Image = "huawei.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Huawei",
                            ShowInHome = false,
                            Slug = "huawei",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4651),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "be084f87-b383-4939-a1db-97c9d16ce295",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4654),
                            CreatedBy = "username",
                            Image = "acer.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Acer",
                            ShowInHome = false,
                            Slug = "acer",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 740, DateTimeKind.Local).AddTicks(4654),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Shopping.Model.Entities.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CartId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Shopping.Model.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = "ce87fa38-6bb9-4f9d-9c7c-b2ca767106ba",
                            CountryId = "820b84fc-a4e0-4f56-a34f-e752287d7e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Istanbul",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7c51c498-8047-4665-bec9-48283eb8de8e",
                            CountryId = "f356f493-c46a-48d2-8908-64deeb51e92f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Berlin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Color", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = "820b84fc-a4e0-4f56-a34f-e752287d7e52",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Turkey",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f356f493-c46a-48d2-8908-64deeb51e92f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Germany",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Conditions");

                    b.Property<string>("CouponNo");

                    b.Property<int>("CouponNumber");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ForStoreId");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("MinTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("OrderId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ForStoreId");

                    b.HasIndex("OrderId");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = "b52b6f2d-b8af-4536-ab90-c3cbc57deedf",
                            Conditions = "5.500.00 TL üzeri alışverişlerde geçerlidir.",
                            CouponNo = "8414727",
                            CouponNumber = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 133m,
                            EndDate = new DateTime(2019, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForStoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            IsActive = false,
                            IsDeleted = false,
                            MinTotalPrice = 5.500m,
                            Name = "Size Özel 133 TL Kupon",
                            OrderId = "3349a57f-2dcb-4b9b-922f-7c134517bd47",
                            StartDate = new DateTime(2019, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8d43b37c-47c2-4229-90c4-e0348c603890",
                            Conditions = "3.500.00 TL üzeri alışverişlerde geçerlidir.",
                            CouponNo = "8514212",
                            CouponNumber = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 90m,
                            EndDate = new DateTime(2019, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForStoreId = "f544e6dd-70c7-4c99-834e-8147e1bff9f1",
                            IsActive = false,
                            IsDeleted = false,
                            MinTotalPrice = 1.500m,
                            Name = "Size Özel 90 TL Kupon",
                            OrderId = "3f6a2da6-f4c8-48c3-a42c-f0e71e37ee4f",
                            StartDate = new DateTime(2019, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = "5c8d78df-6a68-4d2a-abe9-bc5638d91fa3",
                            CityId = "ce87fa38-6bb9-4f9d-9c7c-b2ca767106ba",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Üsküdar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6c438a90-833a-48a1-9c4e-bda2820abcbe",
                            CityId = "7c51c498-8047-4665-bec9-48283eb8de8e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Mitte",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DeliveryAddressId");

                    b.Property<DateTime>("DemandDate");

                    b.Property<string>("InvoiceAddressId");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<string>("StoreId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("InvoiceAddressId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "3349a57f-2dcb-4b9b-922f-7c134517bd47",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddressId = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            DemandDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1990),
                            InvoiceAddressId = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            IsActive = false,
                            IsDeleted = false,
                            OrderCode = "204723561283",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1992),
                            OrderStatus = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "emir"
                        },
                        new
                        {
                            Id = "3f6a2da6-f4c8-48c3-a42c-f0e71e37ee4f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddressId = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            DemandDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1989),
                            InvoiceAddressId = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            IsActive = false,
                            IsDeleted = false,
                            OrderCode = "204723561286",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1991),
                            OrderStatus = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "emir"
                        },
                        new
                        {
                            Id = "51c16d53-3f56-4b7f-b652-37d546811f6b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddressId = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            DemandDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2015),
                            InvoiceAddressId = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            IsActive = false,
                            IsDeleted = false,
                            OrderCode = "204723561287",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1990),
                            OrderStatus = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "emir"
                        },
                        new
                        {
                            Id = "cb93a8b3-c1d6-4c2c-8878-ea91e7e6864c",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddressId = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            DemandDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2014),
                            InvoiceAddressId = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            IsActive = false,
                            IsDeleted = false,
                            OrderCode = "204723561288",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2009),
                            OrderStatus = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "emir"
                        },
                        new
                        {
                            Id = "e4c732da-9f37-4015-b12b-d2d858dfa03a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddressId = "440eb108-0a22-4e9c-a5fb-df0f43a92558",
                            DemandDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2013),
                            InvoiceAddressId = "c3f70794-26a5-4386-b6d6-09dec963b210",
                            IsActive = false,
                            IsDeleted = false,
                            OrderCode = "204723561281",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1988),
                            OrderStatus = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "emir"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailabilityCount");

                    b.Property<string>("BrandId");

                    b.Property<string>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OrderId");

                    b.Property<string>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<string>("ShipperId");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("StoreId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("StoreId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = "c96f1242-aeef-458b-95f5-3a1af309e286",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "51c16d53-3f56-4b7f-b652-37d546811f6b",
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            Quantity = 2,
                            ShipperId = "8a8f0d2c-cc86-4d11-98d8-eb30847859a7",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "97d763e3-04ab-4fc3-ba6f-28742f582630",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "cb93a8b3-c1d6-4c2c-8878-ea91e7e6864c",
                            ProductId = "7b4ff888-2e18-4490-b01a-76c4a7b3095b",
                            Quantity = 1,
                            ShipperId = "5a240eef-d844-4341-811e-3b2377920a5d",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "75711118-3cf5-484d-910d-8897403583b0",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "3349a57f-2dcb-4b9b-922f-7c134517bd47",
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            Quantity = 2,
                            ShipperId = "dc20a22d-51d7-439c-9898-1015954cdbbd",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "787b2292-70fa-4c94-b8b3-4e0ccea4a00a",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "3f6a2da6-f4c8-48c3-a42c-f0e71e37ee4f",
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            Quantity = 1,
                            ShipperId = "a54ae47b-f94b-4bf8-ab1c-fffabd092012",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b010d994-29ef-4f37-a175-da7f3d98159e",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "3f6a2da6-f4c8-48c3-a42c-f0e71e37ee4f",
                            ProductId = "7b4ff888-2e18-4490-b01a-76c4a7b3095b",
                            Quantity = 3,
                            ShipperId = "8a8f0d2c-cc86-4d11-98d8-eb30847859a7",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7ace5a6d-1d8d-47db-939f-97d770746c12",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "e4c732da-9f37-4015-b12b-d2d858dfa03a",
                            ProductId = "fe01d29b-f753-4b89-a6e8-a502de6cfbe1",
                            Quantity = 2,
                            ShipperId = "5a240eef-d844-4341-811e-3b2377920a5d",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "a10f1ef4-9bb8-4378-acdc-d6303d594a4d",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "3f6a2da6-f4c8-48c3-a42c-f0e71e37ee4f",
                            ProductId = "35f09f0a-4f59-4c28-8b09-bbc6b083aa2d",
                            Quantity = 1,
                            ShipperId = "dc20a22d-51d7-439c-9898-1015954cdbbd",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "55d69686-2ae8-4060-8e78-8538d484cbe9",
                            AvailabilityCount = 0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Deneme",
                            NewPrice = 0m,
                            OldPrice = 0m,
                            OrderId = "51c16d53-3f56-4b7f-b652-37d546811f6b",
                            ProductId = "0ff69f0d-76e1-4af0-b33d-e7fdee3975d0",
                            Quantity = 1,
                            ShipperId = "a54ae47b-f94b-4bf8-ab1c-fffabd092012",
                            ShortDescription = "Açıklama",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Page", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<string>("CustomHtml");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Position");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Shopping.Model.Entities.PostCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ParentId");

                    b.Property<string>("Photo")
                        .HasMaxLength(200);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Shopping.Model.Entities.PostPostCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PostCategoryId");

                    b.Property<string>("PostId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("PostPostCategories");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<int>("AvailabilityCount");

                    b.Property<string>("BrandId");

                    b.Property<string>("CategoryId");

                    b.Property<int>("Condition");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<int>("Currency");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsNew");

                    b.Property<bool>("IsOnSale");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500);

                    b.Property<string>("MetaKeywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RatingsCount");

                    b.Property<float>("RatingsValue");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("StoreId");

                    b.Property<float>("Tax");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<float?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "35f09f0a-4f59-4c28-8b09-bbc6b083aa2d",
                            AdditionalInformation = "MacBook Pro 2018 Silver | 512 GB-256 GB-128 GB SSD çeşitleri | 16 GB RAM DDR5 | Ayrıca Hediyelerimiz: Çoklu USB portları,Apple mouse,harici dvd sürücü | ",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(6958),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Stokta 15 adet bulunan MacBook Pro 2018 çeşitli hediyeler ile toplam alımlarda %45 indirim ile vitrinimizde.",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Elektronik",
                            Name = "MacBook Pro 2018",
                            NewPrice = 13500m,
                            OldPrice = 15000m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "MacBook Pro 2018 Silver 256 GB SSD ",
                            Slug = "MacBook Pro 2018 Silver ",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(6971),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "7b4ff888-2e18-4490-b01a-76c4a7b3095b",
                            AdditionalInformation = "Hediyelerimiz bütün iMac ve Apple Pc'lerde geçerlidir.",
                            AvailabilityCount = 25,
                            BrandId = "e8840d39-abf2-4577-bfa5-a92144107b09",
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7642),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "iMac Pro Uzay Grisi 256 GB SSD | 16 GB RAM DDR5 | İntel i7-9900 3.2 Ghz | Hediyelerimiz: Uzay Grisi Klavye-Fare, Usb Çoğaltıcı, Harici DVD Sürücü, JPL Bluetooth Hoparlör",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Elektronik",
                            Name = "iMac Pro Uzay Grisi",
                            NewPrice = 25000m,
                            OldPrice = 30000m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "iMac Pro Uzay Grisi ",
                            Slug = "imac pro uzay grisi",
                            StoreId = "f544e6dd-70c7-4c99-834e-8147e1bff9f1",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7646),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "0ff69f0d-76e1-4af0-b33d-e7fdee3975d0",
                            AdditionalInformation = "Hediyelerimiz bütün iPhone modellerinde geçerlidir.",
                            AvailabilityCount = 25,
                            BrandId = "e8840d39-abf2-4577-bfa5-a92144107b09",
                            CategoryId = "4b64df99-8909-4fb4-bc23-9a84e5063f27",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7661),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "iPhone 6 S 64 GB Gümüş | Hediyelerimiz: Kulaklık, Orjinal Bataryalı Kılıf, İki Uçlu Usb Bellek ",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNew = false,
                            IsOnSale = true,
                            MetaTitle = "Elektronik",
                            Name = "iPhone 6 S 64 GB",
                            NewPrice = 2750m,
                            OldPrice = 2900m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "iPhone 6 S 64 GB Gümüş",
                            Slug = "iPhone 6 S 64 GB Gümüş",
                            StoreId = "5b843cf0-b7a5-475f-b22e-57054c54ba14",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7661),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "4330ef04-db35-4358-936a-d4db324d4fed",
                            AdditionalInformation = "Piyasanın çok altında satıyoruz herkes kullansın diye.",
                            AvailabilityCount = 30,
                            BrandId = "45ee14ef-d408-47e3-b104-01a9e23c5def",
                            CategoryId = "4b64df99-8909-4fb4-bc23-9a84e5063f27",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7670),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Samsung Galaxy Note 9 512 GB Okyanus Mavisi",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNew = true,
                            IsOnSale = false,
                            MetaTitle = "Elektronik",
                            Name = "Samsung Galaxy Note 9 512 GB",
                            NewPrice = 5200m,
                            OldPrice = 0m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Samsung Galaxy Note 9 512 GB Okyanus Mavisi",
                            Slug = "Samsung Galaxy Note 9 Note 9 512 GB Okyanus Mavisi",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7674),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "fe01d29b-f753-4b89-a6e8-a502de6cfbe1",
                            AdditionalInformation = "Bütün AirPodslarda hediyelerimiz geçerlidir.",
                            AvailabilityCount = 30,
                            BrandId = "e8840d39-abf2-4577-bfa5-a92144107b09",
                            CategoryId = "8da13d65-1efb-40ea-b88f-08b06d0776ab",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7683),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Apple AirPods Kulaklık | Hediyelerimiz: Yedek Parçaları Orjinal, Yedek Şarjı",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = false,
                            IsNew = false,
                            IsOnSale = true,
                            MetaTitle = "Elektronik",
                            Name = "Apple AirPods Kulaklık ",
                            NewPrice = 930m,
                            OldPrice = 1000m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Apple AirPods Kulaklık",
                            Slug = "apple airpods kulaklık",
                            StoreId = "f544e6dd-70c7-4c99-834e-8147e1bff9f1",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7683),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "7fdad843-e55c-4003-8b6a-486344e6d8cb",
                            AdditionalInformation = "Pembe Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7695),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Pembe Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih ",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = " Pembe Yasin-i Şerif ve Sureler Kitabı",
                            NewPrice = 2m,
                            OldPrice = 4m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Pembe Yasin-i Şerif ve Sureler Kitabı",
                            Slug = "Pembe Yasin-i Şerif ve Sureler Kitabı",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7698),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "cd9d729e-b245-4606-b480-4e90b94a3882",
                            AdditionalInformation = "Mavi Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7720),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Mavi Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih ",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = " Mavi Yasin-i Şerif ve Sureler Kitabı",
                            NewPrice = 2m,
                            OldPrice = 4m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Mavi Yasin-i Şerif ve Sureler Kitabı",
                            Slug = "Mavi Yasin-i Şerif ve Sureler Kitabı",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7720),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "700fe299-bb99-47a1-acd5-d614016a374e",
                            AdditionalInformation = "Kırmızı Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7729),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Kırmızı Yasin-i Şerif ve Sureler Kitabı, Tül Keseli Tesbih ",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = " Kırmızı Yasin-i Şerif ve Sureler Kitabı",
                            NewPrice = 2m,
                            OldPrice = 4m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Kırmızı Yasin-i Şerif ve Sureler Kitabı",
                            Slug = "Kırmızı Yasin-i Şerif ve Sureler Kitabı",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7729),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "5e575e49-7724-4527-9ee9-15f4718c0778",
                            AdditionalInformation = "Kabe Desenli Yasin-i Şerif ve Tül Keseli Tespih Seti",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7739),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "Kabe Desenli Yasin-i Şerif ve Tül Keseli Tespih Seti",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = "Kabe Desenli Yasin-i Şerif ve Tül Keseli Tespih Seti",
                            NewPrice = 3m,
                            OldPrice = 5m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "Kabe Desenli Yasin-i Şerif ve Tül Keseli Tespih Seti",
                            Slug = "Kabe Desenli Yasin-i Şerif ve Tül Keseli Tespih Seti",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7739),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "1db450c1-594b-4bed-b726-d4462a4d54f6",
                            AdditionalInformation = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7745),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            NewPrice = 89m,
                            OldPrice = 0m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            Slug = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7748),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "48ffccbf-b72e-4328-a5eb-cf487863589c",
                            AdditionalInformation = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            AvailabilityCount = 15,
                            CategoryId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Condition = 1,
                            Cost = 0m,
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7754),
                            CreatedBy = "username",
                            Currency = 0,
                            Description = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            Discount = 0m,
                            IsActive = true,
                            IsDeleted = false,
                            IsFeatured = true,
                            IsNew = false,
                            IsOnSale = false,
                            MetaTitle = "Hediyelik Kitap",
                            Name = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            NewPrice = 89m,
                            OldPrice = 0m,
                            RatingsCount = 5,
                            RatingsValue = 4f,
                            ShortDescription = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            Slug = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Tax = 0f,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 748, DateTimeKind.Local).AddTicks(7754),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ParentId");

                    b.Property<string>("Photo")
                        .HasMaxLength(200);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 732, DateTimeKind.Local).AddTicks(4765),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tüm Kategoriler",
                            Slug = "tum-kategoriler",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 733, DateTimeKind.Local).AddTicks(5956),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b1",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3199),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Prime Video",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "prime-video",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3218),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b2",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3557),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Music, CDs & Vinyl",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "music-cds-vinly",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3560),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b3",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3603),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kindle Store",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "kindle-store",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3606),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b4",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3619),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Arts & Crafts",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "arts-crafts",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3619),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b5",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3638),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Automotive",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "automotive",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3641),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b0",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3650),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Baby",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "baby",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3653),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b7",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3659),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beauty & Personal Care",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "beauty-personal-care",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3662),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b8",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3669),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Books",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "books",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3669),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b9",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3681),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Computers",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "computers",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3681),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "6d8135c2-833f-42fc-900d-6eeeb1c607b6",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3687),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Elektronics",
                            ParentId = "2d53d8ef-0f19-42ed-9126-e03a0a1af060",
                            Slug = "elektronics",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3690),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3700),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bilgisayar",
                            ParentId = "6d8135c2-833f-42fc-900d-6eeeb1c607b6",
                            Slug = "bilgisayar",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3700),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "ed515341-522e-4bfa-8f68-15c874fd77e9",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3709),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dizüstü Notebook",
                            ParentId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Slug = "dizustu-notebook",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3709),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "1f2f8408-9ad2-4908-b310-92dbdabe5979",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3718),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "All-In-One",
                            ParentId = "42729bdd-3160-41f8-b1a6-c68ead8e314d",
                            Slug = "all-ın-one",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3718),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "4b64df99-8909-4fb4-bc23-9a84e5063f27",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3728),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Telefon",
                            ParentId = "6d8135c2-833f-42fc-900d-6eeeb1c607b6",
                            Slug = "telefon",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3728),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "8da13d65-1efb-40ea-b88f-08b06d0776ab",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3737),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kulaklık",
                            ParentId = "6d8135c2-833f-42fc-900d-6eeeb1c607b6",
                            Slug = "kulaklık",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 734, DateTimeKind.Local).AddTicks(3737),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductColor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductPhoto", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Large")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Position");

                    b.Property<string>("ProductId");

                    b.Property<string>("Small")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");

                    b.HasData(
                        new
                        {
                            Id = "3e4cc993-9f23-4bb7-a943-59c3cf7fc166",
                            Alt = "MacBook Pro 2018 Silver ",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 751, DateTimeKind.Local).AddTicks(9850),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "macBookPro2018.jpg",
                            Medium = "macBookPro2018.jpg",
                            Position = 0,
                            ProductId = "35f09f0a-4f59-4c28-8b09-bbc6b083aa2d",
                            Small = "macBookPro2018.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 751, DateTimeKind.Local).AddTicks(9869),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "cf363e7a-b99a-425f-8d07-50487081049b",
                            Alt = "iMac Pro Uzay Grisi",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(665),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "iMacPro.jpg",
                            Medium = "iMacPro.jpg",
                            Position = 0,
                            ProductId = "7b4ff888-2e18-4490-b01a-76c4a7b3095b",
                            Small = "iMacPro.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(668),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "12c5d0df-7ac8-4a6c-8f59-aa4037940c1b",
                            Alt = "iPhone 6 S 64 GB Gümüş",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(687),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "iPhone664.jpg",
                            Medium = "iPhone664.jpg",
                            Position = 0,
                            ProductId = "0ff69f0d-76e1-4af0-b33d-e7fdee3975d0",
                            Small = "iPhone664.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(690),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "85dfb6e4-908d-45c1-b414-a488b6891197",
                            Alt = "Samsung Galaxy Note 9 512 GB Okyanus Mavisi",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(703),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "samsungnote9.jpg",
                            Medium = "samsungnote9.jpg",
                            Position = 0,
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            Small = "samsungnote9.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(703),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "d5266161-dff1-4c09-9a36-d84ac5cc3b1b",
                            Alt = "Apple AirPods Kulaklık ",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(715),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "airpods.jpg",
                            Medium = "airpods.jpg",
                            Position = 0,
                            ProductId = "fe01d29b-f753-4b89-a6e8-a502de6cfbe1",
                            Small = "airpods.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(718),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "54a82e8b-de71-4f99-9841-4431e78b7552",
                            Alt = "Yasin-i Şerif ve Bazı Sureler Pembe Kitap ",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(774),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "duakitabıp.jpg",
                            Medium = "duakitabıp.jpg",
                            Position = 0,
                            ProductId = "7fdad843-e55c-4003-8b6a-486344e6d8cb",
                            Small = "duakitabıp.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(774),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "077e4e64-313e-4d4e-a340-5c84e0a3d748",
                            Alt = "Yasin-i Şerif ve Bazı Sureler Mavi Kitap ",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(783),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "duakitabım.jpg",
                            Medium = "duakitabım.jpg",
                            Position = 0,
                            ProductId = "cd9d729e-b245-4606-b480-4e90b94a3882",
                            Small = "duakitabım.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(783),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "df2bd20c-176a-4392-a918-f0e8509c9161",
                            Alt = "Yasin-i Şerif ve Bazı Sureler Kırmızı Kitap ",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(790),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "duakitabık.jpg",
                            Medium = "duakitabık.jpg",
                            Position = 0,
                            ProductId = "700fe299-bb99-47a1-acd5-d614016a374e",
                            Small = "duakitabık.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(793),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "7778feda-520c-4157-a80e-0bee5ee57511",
                            Alt = "Kabe Desenli Yasin ve Tül Keseli Tespih Seti",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(796),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "kurantesbih.jpg",
                            Medium = "kurantesbih.jpg",
                            Position = 0,
                            ProductId = "5e575e49-7724-4527-9ee9-15f4718c0778",
                            Small = "kurantesbih.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(799),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "f9a0eaa5-2934-4097-8c09-551d3cf8b48b",
                            Alt = "50 Adet Mor Tül Keseli Tespih ve Kadife Sunumluk",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(805),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "50adettesbih.jpg",
                            Medium = "50adettesbih.jpg",
                            Position = 0,
                            ProductId = "1db450c1-594b-4bed-b726-d4462a4d54f6",
                            Small = "50adettesbih.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(808),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "c7e447b9-fcbe-43e7-a46c-1a578400fa8e",
                            Alt = "50 Adet Siyah Tül Keseli Tespih ve Kadife Sunumluk",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(815),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Large = "50adettesbihs.jpg",
                            Medium = "50adettesbihs.jpg",
                            Position = 0,
                            ProductId = "48ffccbf-b72e-4328-a5eb-cf487863589c",
                            Small = "50adettesbihs.jpg",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 752, DateTimeKind.Local).AddTicks(815),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductQuestion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("ProductId");

                    b.Property<string>("QuestionCategoryId");

                    b.Property<DateTime>("ShareDate");

                    b.Property<string>("StoreId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductQuestions");

                    b.HasData(
                        new
                        {
                            Id = "5a08fa86-8ef2-4e9b-b690-58fd3569d0da",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Açıklama",
                            IsActive = false,
                            IsDeleted = false,
                            IsPublic = true,
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            QuestionCategoryId = "c91699f8-0688-4bf5-926d-9f445191a97e",
                            ShareDate = new DateTime(2019, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Title = "Kargo firmanız hale ürünü getirmedi.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.QuestionCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");

                    b.HasData(
                        new
                        {
                            Id = "c91699f8-0688-4bf5-926d-9f445191a97e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Kargo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.RecentlyDisplayedProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime>("DisplayDate");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("RecentlyDisplayedProduct");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<string>("ApprovedBy");

                    b.Property<string>("Body")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = "86b27fee-aa1a-4552-9bcd-6c8100b11138",
                            Body = "Çok iyi bir telefon elimde şu an",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(2333),
                            CreatedBy = "username",
                            Email = "karmaillegal57@gmail.com",
                            IsActive = true,
                            IsApproved = false,
                            IsDeleted = false,
                            Name = "Emir Demirci",
                            ProductId = "0ff69f0d-76e1-4af0-b33d-e7fdee3975d0",
                            Rating = 0,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(2351),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "a93dffde-741e-45bc-8aab-8976e03c172d",
                            Body = "Çok iyi bir telefon elimde şu an",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3185),
                            CreatedBy = "username",
                            Email = "mdemirci@outlook.com",
                            IsActive = true,
                            IsApproved = false,
                            IsDeleted = false,
                            Name = "Murat Demirci",
                            ProductId = "4330ef04-db35-4358-936a-d4db324d4fed",
                            Rating = 0,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3185),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "c35776e9-c002-4af9-8553-eb9e466b8910",
                            Body = "Çok iyi bir notebook.",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3203),
                            CreatedBy = "username",
                            Email = "ydemirci@outlook.com",
                            IsActive = true,
                            IsApproved = false,
                            IsDeleted = false,
                            Name = "Yasin Demirci",
                            ProductId = "35f09f0a-4f59-4c28-8b09-bbc6b083aa2d",
                            Rating = 0,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3207),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "a19e279f-65b3-4b9d-b658-037c9b763aac",
                            Body = "Çok iyi bir notebook.",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3210),
                            CreatedBy = "username",
                            Email = "cdemirci@outlook.com",
                            IsActive = true,
                            IsApproved = false,
                            IsDeleted = false,
                            Name = "Cihan Demirci",
                            ProductId = "7b4ff888-2e18-4490-b01a-76c4a7b3095b",
                            Rating = 0,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3213),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "ad673d9a-ff2d-4cb0-bcac-5587f08d2ffc",
                            Body = "Çok iyi bir kulaklık.",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3222),
                            CreatedBy = "username",
                            Email = "medemirci@outlook.com",
                            IsActive = true,
                            IsApproved = false,
                            IsDeleted = false,
                            Name = "Meryem Demirci",
                            ProductId = "fe01d29b-f753-4b89-a6e8-a502de6cfbe1",
                            Rating = 0,
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 755, DateTimeKind.Local).AddTicks(3222),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Shipper", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            Id = "8a8f0d2c-cc86-4d11-98d8-eb30847859a7",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Sürat Kargo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://www.suratkargo.com"
                        },
                        new
                        {
                            Id = "5a240eef-d844-4341-811e-3b2377920a5d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "MNG Kargo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://www.mngkargo.com"
                        },
                        new
                        {
                            Id = "dc20a22d-51d7-439c-9898-1015954cdbbd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Yurtiçi Kargo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://www.yurticikargo.com"
                        },
                        new
                        {
                            Id = "a54ae47b-f94b-4bf8-ab1c-fffabd092012",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Aras Kargo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "http://www.araskargo.com"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Slide", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Position");

                    b.Property<string>("SliderId");

                    b.Property<string>("Style");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("SliderId");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = "007f78d2-f4d5-413a-9a80-737bc6850d5d",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8377),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kampanyalı Ürünlerimiz",
                            Photo = "waterandmountains.jpg",
                            Position = 0,
                            SliderId = "b5616904-9304-40ab-9488-5d4809021445",
                            Text = "Çeşit Çeşit Paketlerdeki Orjinal Hediyeler",
                            Title = "Hediye Paketli Ürünlerimiz",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8389),
                            UpdatedBy = "username",
                            Url = "http://www.google.com.tr"
                        },
                        new
                        {
                            Id = "3a64713c-22b6-48ff-8d84-740dcefdbd37",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8912),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yurt Dışından Gelen Ürünler",
                            Photo = "yurtdış.jpg",
                            Position = 0,
                            SliderId = "b5616904-9304-40ab-9488-5d4809021445",
                            Text = "Bütün Avrupa ve Asya'daki ülkelerdeki ürünler",
                            Title = "Kaliteli ve Uygun Fiyatlarla",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8915),
                            UpdatedBy = "username",
                            Url = "http://www.apple.com.tr"
                        },
                        new
                        {
                            Id = "0c0d6d02-c99a-4537-9821-f2c90f21f451",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8924),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Düğün Paketlerimiz",
                            Photo = "aile.jpg",
                            Position = 0,
                            SliderId = "b5616904-9304-40ab-9488-5d4809021445",
                            Text = "Bütün Markaların Ürünleri Vitrinlerimizde",
                            Title = "Her Türlü Ev Eşyaları Uygun Fiyatlarla",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8924),
                            UpdatedBy = "username",
                            Url = "http://www.evkur.com.tr"
                        },
                        new
                        {
                            Id = "cc3fc344-2141-40c5-be49-3b9c661d56b2",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8927),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İndirimli Apple Ürünleri",
                            Photo = "appleur.jpg",
                            Position = 0,
                            SliderId = "b5616904-9304-40ab-9488-5d4809021445",
                            Text = "Bütün Elektronik Cihazlar Vitrinlerimizde",
                            Title = "%40 İndirim ile Vitrinlerimizde",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8927),
                            UpdatedBy = "username",
                            Url = "http://www.apple.com.tr"
                        },
                        new
                        {
                            Id = "072df9fd-ef97-40f4-a10e-5b0e7dc3f08c",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8931),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "2019 Model MacBook Air",
                            Photo = "MacBookAir2019.jpg",
                            Position = 0,
                            SliderId = "b5616904-9304-40ab-9488-5d4809021445",
                            Text = "Kaçırmayın",
                            Title = "Şubat 2019'da Vitrinlerimizde",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 737, DateTimeKind.Local).AddTicks(8934),
                            UpdatedBy = "username",
                            Url = "http://www.apple.com.tr"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Slider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = "b5616904-9304-40ab-9488-5d4809021445",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 735, DateTimeKind.Local).AddTicks(6777),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Ana Kaydırıcı",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 735, DateTimeKind.Local).AddTicks(6790),
                            UpdatedBy = "username"
                        },
                        new
                        {
                            Id = "d1689024-2cff-420d-a2aa-141e93cbbff7",
                            CreatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 735, DateTimeKind.Local).AddTicks(7374),
                            CreatedBy = "username",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Orta Kaydırıcı",
                            UpdatedAt = new DateTime(2019, 4, 9, 13, 28, 31, 735, DateTimeKind.Local).AddTicks(7377),
                            UpdatedBy = "username"
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Store", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<string>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            Address = "Üsküdar",
                            ContactEmail = "emir.dmrc57@gmail.com",
                            ContactName = "Murat Demirci",
                            ContactPhone = "05395675645",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsActive = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            Logo = "vatan.jpg",
                            Name = "Vatan Bilgisayar",
                            Owner = "mdemirci01@outlook.com",
                            Slug = "http://www.vatanbilgisayar.com",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5b843cf0-b7a5-475f-b22e-57054c54ba14",
                            Address = "Yeşilpınar Mah. Girne Cad. No:14 Daire:12",
                            ContactEmail = "karmaillegal57@gmail.com",
                            ContactName = "Emir Demirci",
                            ContactPhone = "05301564531",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsActive = false,
                            IsDeleted = false,
                            IsFeatured = false,
                            Logo = "appstore1.jpg",
                            Name = "AppStore1",
                            Owner = "emirdemirci721@gmail.com",
                            Slug = "http://www.hepsiburada.com",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f544e6dd-70c7-4c99-834e-8147e1bff9f1",
                            Address = "Eyüp",
                            ContactEmail = "edmrc57@gmail.com",
                            ContactName = "Yasin Demirci",
                            ContactPhone = "05678954567",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Teknosa Herkes İçin Teknoloji",
                            IsActive = false,
                            IsDeleted = false,
                            IsFeatured = true,
                            Logo = "teknosa.jpg",
                            Name = "Teknosa",
                            Owner = "karmaillegal57@gmail.com",
                            Slug = "http://www.teknosa.com",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.StoreBrand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("StoreId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreBrands");

                    b.HasData(
                        new
                        {
                            Id = "ecc78fd7-fafc-4969-be4f-193ed1f84532",
                            BrandId = "6d85aacb-8f1b-4488-b5bd-5390b9cd76c6",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            StoreId = "f544e6dd-70c7-4c99-834e-8147e1bff9f1",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "86dcccf4-3481-4e07-8ec9-0bcbbd90b1ad",
                            BrandId = "45ee14ef-d408-47e3-b104-01a9e23c5def",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            StoreId = "6ad3fd8a-9b43-440d-bd83-fcf033101d9d",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "ad83d190-64b9-4828-aded-af481dbc8934",
                            BrandId = "e8840d39-abf2-4577-bfa5-a92144107b09",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsDeleted = false,
                            StoreId = "5b843cf0-b7a5-475f-b22e-57054c54ba14",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shopping.Model.Entities.Wishlist", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Culture");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserName", "ProductId", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL AND [ProductId] IS NOT NULL");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shopping.Model.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shopping.Model.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Shopping.Model.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shopping.Model.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shopping.Model.Entities.Address", b =>
                {
                    b.HasOne("Shopping.Model.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("Shopping.Model.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId");

                    b.HasOne("Shopping.Model.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.CartItem", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.City", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Coupon", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Store", "ForStore")
                        .WithMany("Coupons")
                        .HasForeignKey("ForStoreId");

                    b.HasOne("Shopping.Model.Entities.Order", "Order")
                        .WithMany("Coupons")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.District", b =>
                {
                    b.HasOne("Shopping.Model.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Order", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Address", "DeliveryAddress")
                        .WithMany("OrdersToDeliver")
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("Shopping.Model.Entities.Address", "InvoiceAddress")
                        .WithMany("OrdersToInvoice")
                        .HasForeignKey("InvoiceAddressId");

                    b.HasOne("Shopping.Model.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.OrderItem", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Brand", "Brand")
                        .WithMany("OrdersItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("Shopping.Model.Entities.ProductCategory", "Category")
                        .WithMany("OrderItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Shopping.Model.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId");

                    b.HasOne("Shopping.Model.Entities.Shipper", "Shipper")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShipperId");

                    b.HasOne("Shopping.Model.Entities.Store", "Store")
                        .WithMany("OrderItems")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.PostCategory", b =>
                {
                    b.HasOne("Shopping.Model.Entities.PostCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.PostPostCategory", b =>
                {
                    b.HasOne("Shopping.Model.Entities.PostCategory", "PostCategory")
                        .WithMany("PostPostCategories")
                        .HasForeignKey("PostCategoryId");

                    b.HasOne("Shopping.Model.Entities.Post", "Post")
                        .WithMany("PostPostCategories")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Product", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Shopping.Model.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Shopping.Model.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductCategory", b =>
                {
                    b.HasOne("Shopping.Model.Entities.ProductCategory", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductColor", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId");

                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductPhoto", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.ProductQuestion", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("ProductId");

                    b.HasOne("Shopping.Model.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("QuestionCategoryId");

                    b.HasOne("Shopping.Model.Entities.Store", "Store")
                        .WithMany("ProductQuestions")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.RecentlyDisplayedProduct", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("RecentlyDisplayedProducts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Review", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Slide", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Slider", "Slider")
                        .WithMany("Slides")
                        .HasForeignKey("SliderId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.StoreBrand", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Brand", "Brand")
                        .WithMany("StoreBrands")
                        .HasForeignKey("BrandId");

                    b.HasOne("Shopping.Model.Entities.Store", "Store")
                        .WithMany("StoreBrands")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Shopping.Model.Entities.Wishlist", b =>
                {
                    b.HasOne("Shopping.Model.Entities.Product", "Product")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
